format = 1

%define {
	make-functions {
		%pattern {
			regex = '(?<=\$[{(])(?:patsubst|subst|strip|findstring|filter(?:-out)|' +
				'sort|word|wordlist|words|firstword|lastword|dir|notdir|suffix|' +
				'basename|addsuffix|addprefix|join|wildcard|realpath|abspath|' +
				'if|or|and|foreach|call|value|eval|origin|flavor|error|warning|' +
				'info)\b'
			style = "misc"
		}
	}
	make-variable {
		%pattern {
			start = '\$\{'
			%pattern { use = "make-variable" }
			%pattern { use = "make-functions" }
			end = '\}'
			style = "variable"
		}
		%pattern {
			start = '\$\('
			%pattern { use = "make-variable" }
			%pattern { use = "make-functions" }
			end = '\)'
			style = "variable"
		}
		%pattern {
			regex = '\$\$'
		}
	}
	make-comment {
		%pattern {
			start = '#'
			end = '(?<!\\)$'
			style = "comment"
		}
	}
	make-shell {
		# We define the "shell" pattern as a separate pattern to allow
		# overriding. Although in almost all cases it will be sh, the SHELL
		# variable defines the shell in use. Furthermore, simply including
		# sh.lang is not going to work, because escaping of the dollar
		# character is required.

		# Another complication is that commands are terminated at the end of
		# line, unless a \ preceeds the newline. This is different from the
		# normal shell matching behaviour, where most environments span
		# newlines.

		# The one thing we do know is that make variables are expanded in the
		# commands, so we include those by default.
		%pattern { use = "make-variable" }
	}
}

%pattern { use = "make-variable" }
%pattern { use = "make-comment" }
%pattern {
	start = '^\t'
	%pattern { use = "make-shell" }
	end = '(?<!\\)$'
}
%pattern {
	start = '[:+?]?='
	%pattern { use = "make-variable" }
	%pattern { use = "make-comment" }
	end = '(?<!\\)$'
}
# BSD make also uses != as shell expansion
%pattern {
	start = '!='
	%pattern { use = "make-shell" }
	end = '(?<!\\)$'
}
%pattern {
	# BSD make also uses ! as rule separator
	start = '::?|!'
	%pattern {
		start = ';'
		%pattern { use = "make-shell" }
		end = '(?<!\\)$'
	}
	%pattern { use = "make-variable" }
	%pattern { use = "make-comment" }
	end = '(?<!\\)$|#'
}
# GNU make directives
%pattern {
	start = '^ *\K(?:-?include|ifn?(:?def|eq)|else|endif)\b'
	%pattern { use = "make-variable" }
	%pattern { use = "make-comment" }
	end = '(?<!\\)$'
	delim-style = "keyword"
}
%pattern {
	start = '^ *\K\.(?:s?include|undef|error|warning|if(?:n?(?:def|make))|elif(?:n?(?:def|make))?|else)\b'
	%pattern { use = "make-variable" }
	%pattern { use = "make-comment" }
	end = '(?<!\\)$'
	delim-style = "keyword"
}

# This pattern colors all line beginnings. All assignments and rules will stop
# coloring after the operator, due to the patterns above.
%pattern {
	regex = '[^ ]'
	style = 'string'
}
