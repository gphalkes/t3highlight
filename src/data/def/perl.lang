%define {
	perl-comment {
		%highlight {
			start = '#'
			end = '$'
			style = "comment"
		}
	}
	perl-escape {
		%highlight {
			regex = '\\(?:x(?:[\da-fA-F]{2}|\{[\da-fA-F]+\})|[0-3][0-7]{0,2}|c.|N\{(?:U\+[\da-fA-F]{4}|[\w\s]+)\}|.)'
			style = "string-escape"
		}
	}

	perl-nested-curly {
		%highlight {
			start = '\{'
			%highlight { use = "perl-escape" }
			end = '\}'
			nested = yes
			style = "string"
		}
	}
	perl-nested-parenthesis {
		%highlight {
			start = '\('
			%highlight { use = "perl-escape" }
			end = '\)'
			nested = yes
			style = "string"
		}
	}
	perl-nested-block {
		%highlight {
			start = '\['
			%highlight { use = "perl-escape" }
			end = '\]'
			nested = yes
			style = "string"
		}
	}
	perl-nested-angle {
		%highlight {
			start = '\<'
			%highlight { use = "perl-escape" }
			end = '\>'
			nested = yes
			style = "string"
		}
	}

	perl-second-quote {
		%highlight {
			start = '(?<delim>[^({[<\s#])'
			extract = "delim"
			%highlight { use = "perl-escape" }
			end = "(?&delim)[a-z]*"
			exit = 3
			style = "string"
		}

		%highlight {
			start = '\{'
			%highlight { use = "perl-escape" }
			%highlight { use = "perl-nested-curly" }
			end = '\}[a-z]*'
			exit = 3
			style = "string"
		}
		%highlight {
			start = '\('
			%highlight { use = "perl-escape" }
			%highlight { use = "perl-nested-parenthesis" }
			end = '\)[a-z]*'
			exit = 3
			style = "string"
		}
		%highlight {
			start = '\['
			%highlight { use = "perl-escape" }
			%highlight { use = "perl-nested-block" }
			end = '\][a-z]*'
			exit = 3
			style = "string"
		}
		%highlight {
			start = '\<'
			%highlight { use = "perl-escape" }
			%highlight { use = "perl-nested-angle" }
			end = '\>[a-z]*'
			exit = 3
			style = "string"
		}
	}

  perl-var {
		%highlight {
			regex = "(?:\$#?|@|%|\*)(?:[a-zA-Z_]\w*(?:(?:(?:::)+|(?:::)*'+)[a-zA-Z_]\w*)*|" +
				"(?:(?:(?:::)+|(?:::)*'+)[a-zA-Z_]\w*)+|[^\s\w^{]|\^_\w+|\^[^\s])"
			style = "variable"
		}
		%highlight {
			start = "(?:\$#?|@|%|\*)\{"
      %highlight { use = "perl-var" }
			end = "\}"
			style = "variable"
		}
  }

	perl-base {
		%highlight { use = "perl-comment" }
		%highlight {
			regex = '-X\b|\b(?:abs|accept|alarm|and|atan2|bind|binmode|bless|break|' +
				'caller|ch(?:dir|mod|omp|op|own|r(?:oot)?)|close(?:dir)?|cmp|connect|' +
				'continue|cos|crypt|dbm(?:close|open)|default|defined|delete|die|' +
				'do|dump|each|els(?:e|if)|end(?:grent|hostent|netent|protoent|pwent|servent)|' +
				'eof|eq|eval|exec|exists|exit|exp|fcntl|fileno|flock|for(?:k|mat|' +
				'mline|each)?|get(?:c|gr(?:ent|gid|nam)|host(?:byaddr|byname|ent)|' +
				'login|net(?:byaddr|byname|ent)|peername|pgrp|ppid|priority|' +
				'proto(?:byname|bynumber|ent)|pwent|pwnam|pwuid|serv(?:byname|' +
				'byport|ent)|sock(?:name|opt))|ge|given|glob|gmtime|goto|grep|gt|hex|' +
				'if|import|index|int|ioctl|join|keys|kill|last|lc(?:first)?|le(?:ngth)?|' +
				'link|listen|local(?:time)?|lock|log|lstat|lt|map|mkdir|msg(?:ctl|' +
				'get|rcv|snd)|my|ne(?:xt)?|not?|oct|open(?:dir)?|ord?|our|pack(?:age)?|' +
				'pipe|pop|pos|printf?|prototype|push|quotemeta|rand|read(?:dir|' +
				'line|link|pipe)?|re(?:cv|do|f|name|quire|set|turn|verse|winddir)|' +
				'rindex|rmdir|say|scalar|seek(?:dir)?|select|sem(?:ctl|get|op)|' +
				'send|set(?:grent|hostent|netent|pgrp|priority|protoent|pwent|' +
				'servent|sockopt)|shift|shm(?:ctl|get|read|write)|shutdown|sin|' +
				'sleep|socket(?:pair)?|sort|splice|split|sprintf|sqrt|srand|' +
				'state?|study|sub(?:str)?|sy(?:mlink|scall|sopen|sread|sseek|' +
				'stem|swrite)|tell(?:dir)?|tied?|times?|truncate|uc(?:first)?|' +
				'umask|un(?:def|link|pack|shift|tie)|until|unless|use|utime|values|vec|' +
				'wait(?:pid)?|wantarray|warn|when|while|write|xor)\b'
			style = "keyword"
		}

    %highlight { use = "perl-var" }

		%highlight {
			regex = '(?<![^-+\W])(?:0[xX][0-9a-fA-F][0-9a-fA-F_]*|0b[01][01_]*|\d[\d_]*)\b'
			style = "number"
		}
		%highlight {
			regex = '(?<![^-+\W])(?:(?:\d[\d_]*\.[\d_]*|\.\d[\d_]*)(?:E[-+]?[\d_]+)?|\d[\d_]*E[-+]?[\d_]+)'
			style = "number"
		}

		# Here begins the Perl quoting insanity. Perl makes life extremely difficult for
		# highlighters, because any character is allowed as a quote character, and there
		# are also four types of bracketing quotes ( () {} [] and <> ). And as if that
		# wasn't difficult enough to handle, for the s and tr/y operators which have two
		# quoted strings, the second string is quoted independently if the first string
		# uses a bracketing quote. Also, in some variants the full range of escape
		# sequences is available, while in others only \\ and \<closing quote character>
		# are recognised. And of course the bracketing quotes nest.

		# A further complication is the use of the # character as delimiter, which may
		# only be used as delimiter if it directly follows the operator. To make it
		# easy, the letters and numbers may of course also be used as delimiters, but
		# they _must_ be seperated by some white space.

		# And then we haven't even touched upon the here-docs, which are allowed
		# practically anywhere, even inside quoted strings. And of course you can use
		# more than one per line.

		# In the patterns below, we try our best to highlight everything correctly, but
		# there are some things which are just impossible. The here-docs do not work
		# inside quoted strings, and multiple here-docs on line are only partially
		# supported (see below). Also, we make no distinction in escaping interpretation.

		%highlight {
			start = '\b(?:q|qq|qx|qw)\b'
			%on-entry {
				%highlight {
					start = '#'
					end = '#'
					exit = 3
					style = "string"
				}
				end = ''
			}
			%highlight { use = "perl-comment" }
			%highlight {
				start = "(?<delim>[^({[<\s#])"
				extract = "delim"
				%highlight { use = "perl-escape" }
				end = '(?&delim)'
				exit = 2
				style = "string"
			}
			%highlight {
				start = '\{'
				%highlight { use = "perl-escape" }
				%highlight { use = "perl-nested-curly" }
				end = '\}'
				exit = 2
				style = "string"
			}
			%highlight {
				start = '\('
				%highlight { use = "perl-escape" }
				%highlight { use = "perl-nested-parenthesis" }
				end = '\)'
				exit = 2
				style = "string"
			}
			%highlight {
				start = '\['
				%highlight { use = "perl-escape" }
				%highlight { use = "perl-nested-block" }
				end = '\]'
				exit = 2
				style = "string"
			}
			%highlight {
				start = '\<'
				%highlight { use = "perl-escape" }
				%highlight { use = "perl-nested-angle" }
				end = '\>'
				exit = 2
				style = "string"
			}
			delim-style = "string"
		}

		%highlight {
			start = '\b(?:m|qr)\b'
			%on-entry {
				%highlight {
					start = '#'
					end = '#'
					exit = 3
					style = "string"
				}
				end = ''
			}
			%highlight { use = "perl-comment" }
			%highlight {
				start = "(?<delim>[^({[<\s#])"
				extract = "delim"
				%highlight { use = "perl-escape" }
				end = '(?&delim)[a-z]*'
				exit = 2
				style = "string"
			}
			%highlight {
				start = '\{'
				%highlight { use = "perl-escape" }
				%highlight { use = "perl-nested-curly" }
				end = '\}[a-z]*'
				exit = 2
				style = "string"
			}
			%highlight {
				start = '\('
				%highlight { use = "perl-escape" }
				%highlight { use = "perl-nested-parenthesis" }
				end = '\)[a-z]*'
				exit = 2
				style = "string"
			}
			%highlight {
				start = '\['
				%highlight { use = "perl-escape" }
				%highlight { use = "perl-nested-block" }
				end = '\][a-z]*'
				exit = 2
				style = "string"
			}
			%highlight {
				start = '\<'
				%highlight { use = "perl-escape" }
				%highlight { use = "perl-nested-angle" }
				end = '\>[a-z]*'
				exit = 2
				style = "string"
			}
			delim-style = "keyword"
		}


		%highlight {
			start = "'"
			%highlight {
				regex = "\\[\\']"
				style = "string-escape"
			}
			end = "'"
			style = "string"
		}

		%highlight {
			start = '"'
			%highlight { use = "perl-escape" }
			end = '"'
			style = "string"
		}

		%highlight {
			start = '`'
			%highlight { use = "perl-escape" }
			end = '`'
			style = "string"
		}

		%highlight {
			start = '/'
			%highlight { use = "perl-escape" }
			end = '/'
			style = "string"
		}

		%highlight {
			start = '\b(:?s|tr|y)\b'
			%on-entry {
				%highlight {
					start = '#'
					%on-entry {
						end = '#'
					}
					end = '#'
					exit = 3
				}
				end = ''
				style = "string"
			}

			%highlight { use = "perl-comment" }
			%highlight {
				start = "(?<delim>[^({[<\s#])"
				extract = "delim"
				%highlight { use = "perl-escape" }
				%on-entry {
					%highlight { use = "perl-escape" }
					end = '(?&delim)'
				}
				end = '(?&delim)[a-z]*'
				exit = 2
				style = "string"
			}

			%highlight {
				start = '\{'
				%on-entry {
					%highlight { use = "perl-escape" }
					%highlight { use = "perl-nested-curly" }
					end = '\}'
				}

				%highlight { use = "perl-comment" }
				%highlight { use = "perl-second-quote" }
				style = "string"
			}

			%highlight {
				start = '\('
				%on-entry {
					%highlight { use = "perl-escape" }
					%highlight { use = "perl-nested-parenthesis" }
					end = '\)'
				}

				%highlight { use = "perl-comment" }
				%highlight { use = "perl-second-quote" }
				style = "string"
			}

			%highlight {
				start = '\['
				%on-entry {
					%highlight { use = "perl-escape" }
					%highlight { use = "perl-nested-block" }
					end = '\]'
				}

				%highlight { use = "perl-comment" }
				%highlight { use = "perl-second-quote" }
				style = "string"
			}

			%highlight {
				start = '\<'
				%on-entry {
					%highlight { use = "perl-escape" }
					%highlight { use = "perl-nested-angle" }
					end = '\>'
				}

				%highlight { use = "perl-comment" }
				%highlight { use = "perl-second-quote" }
				style = "string"
			}

			delim-style = "keyword"
		}
	}

	perl {
		%highlight { use = "perl-base" }
		%highlight {
			start = '^=\w+'
			end = '^=cut(?:\s.*)'
			style = "comment-keyword"
		}

		%highlight {
			start = '__(?:END|DATA)__'
			style = "misc"
		}

		# Start a here-doc.
		%highlight {
			start = "<<(['""`]?)(?<delim>\w+)\1"
			extract = "delim"
			%on-entry {
				# We still have to finish the line, so we include perl-base, but
				# without the here-doc and __END__/__DATA__ support.
				%highlight { use = "perl-base" }
				# We fake support for multiple here-docs here, by jumping out of this state
				# when we find another here-doc. That way, the new here-doc will be
				# matched by the outer state again, thus restarting the search for the
				# here-doc end marker with the marker of the new here-doc. Assuming that
				# the previous here-doc does not contain the marker for the new here-doc,
				# this will actually simulate multiple here-docs on a single line.
				%highlight {
					regex = "(?=<<(['""`]?)(?<delim>\w+)\1)"
					exit = 2
				}
				# At the end of the line, we need to start parsing the here-doc.
				# That is what the enclosing state does.
				end = '$'
				style = "normal"
			}
			end = "^(?&delim)$"
			style = "string"
		}
	}
}
