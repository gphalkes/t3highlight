%define {
	style-scope = "javascript"

	javascript-string-escape {
		%highlight {
			regex = '\\(?:[''"\\bfnrtv]|x[\da-fA-F]{2}|u[\da-fA-F]{4})'
			style = "string-escape"
		}
	}

	javascript-regex-literal {
		%highlight {
		    # Exclude comment starting instances of / (i.e. /* and //).
			start = '/(?=[^*/])'
			%highlight { regex = '\\.' }
			%highlight {
				start = '\['
				%highlight { regex = '\\.' }
				end = ']'
			}
			# The end pattern here is not correct according to the specification.
			# However, the only characters allowed after a regular expression
			# literal are ASCII letters anyway, so anything else we just ignore.
			end = '$|/\w*'
			style = "string"
		}
	}
	javascript-comment {
		%highlight {
			start = '/\*'
			end = '\*/'
			style = "comment"
		}
		%highlight {
			start = '//'
			end = '(?<!\\)$'
			style = "comment"
		}
	}

	javascript {
		%highlight { use = "javascript-comment" }

		%highlight {
			start = '(?:\bL)?"'
			%highlight { use = "javascript-string-escape" }
			%highlight {
				start = '\\$'
				end = '^'
			}
			end = '"|$'
			style = "string"
		}
		%highlight {
			start = "(?:\bL)?'"
			%highlight { use = "javascript-string-escape" }
			%highlight {
				start = '\\$'
				end = '^'
			}
			end = "'|$"
			style = "string"
		}

		# Here we hack in the regular expression literals. The problem here is that
		# these literals should only be detected in certain places. In other places,
		# the / indicates a division and should not be mistaken for a regular
		# expression literal. This looks for one of the characters =, ( or :, or
		# the keywords return and throw.
		%highlight {
			start = '[=(:,]'
			%highlight { use = "javascript-comment" }
			%highlight { use = "javascript-regex-literal" }
			end = '(?![\s=(:]|$)'
		}
		%highlight {
			start = '\breturn|throw\b'
			%highlight { use = "javascript-comment" }
			%highlight { use = "javascript-regex-literal" }
			end = '(?![\s=(:,]|$)'
			delim-style = "keyword"
		}

		%highlight {
			regex = '\b(?:break|case|catch|continue|debugger|default|delete|do|else|finally|' +
				'for|function|if|in(:?stanceof)?|new|switch|this|throw|try|typeof|' +
				'var|void|while|with|null|true|false)\b'
			style = "keyword"
		}
		# Use of the FutureReservedWords should yield an error
		%highlight {
			regex = '\b(?:class|const|enum|export|extends|import|super|implements|interface|' +
				'let|package|private|protected|public|static|yield)\b'
			style = "error"
		}

		# Integer constants
		%highlight {
			regex = '(?<![^-+\W])(?:0[xX][\da-fA-F]+|\d+)\b'
			style = "number"
		}
		# Floating point constants
		%highlight {
			regex = '(?<![^-+\W])(?:\d+\.\d*|\.\d+)(?:[eE][-+]?\d+)?|\d+[eE][-+]?\d+'
			style = "number"
		}
	}
}
