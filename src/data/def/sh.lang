%define {
	sh-string {
		%highlight {
			start = "'"
			end = "'"
			style = "string"
		}
		%highlight {
			start = '"'
			%highlight { regex = '\\[$`"\\]' }
			%highlight { use = "sh-variable" }
			%highlight { use = "sh-arithmetic" }
			%highlight { use = "sh-eval" }
			%highlight { use = "sh-simple-eval" }
			end = '"'
			style = "string"
		}
	}
	sh-comment {
		%highlight {
			start = '#'
			end = '$'
			style = "comment"
		}
	}


	sh-variable {
		%highlight {
			regex = '\$(?:[-@*#?$!0-9]|[_a-zA-Z][_a-zA-Z]*)'
			style = "variable"
		}
		%highlight {
			start = '\$\{'
			%highlight { regex = '\\.' }
			%highlight { use = "sh-string" }
			%highlight { use = "sh-arithmetic" }
			%highlight { use = "sh-eval" }
			%highlight { use = "sh-simple-eval" }
			end = '\}'
			style = "variable"
			nested = yes
		}
	}

	sh-eval {
		%highlight {
			start = '\$\('
			%highlight { use = "sh-shell" }
			%highlight {
				start = '\('
				%highlight { use = "sh-shell" }
				end = '\)'
				nested = yes
			}
			end = '\)'
			style = "misc"
			# Don't need nested here, because we already include eval through
			# use = "sh-shell"
		}
	}

	sh-arithmetic {
		%highlight {
			start = '\$\(\('
			%highlight { regex = '\\.' }
			%highlight { use = "sh-variable" }
			%highlight { use = "sh-eval" }
			end = '\)\)'
		}
	}
	sh-simple-eval {
		%highlight {
			start = '`'
			%highlight { regex = '\\[\\`$]' }
			end = '`'
			style = "misc"
		}
	}

	sh-keyword {
		%highlight {
			regex = '(?<![-\w])(?:if|then|else|elif|fi|done|do|case|esac|while|until|for|in|' +
				'break|continue|eval|exec|exit|export|readonly|return|set|shift|' +
				'times|trap|unset|source|alias|bg|bind|break|builtin|caller|cd|' +
				'command|compgen|complete|compopt|declare|typeset|dirs|disown|echo|' +
				'enable|fc|fg|getopts|hash|help|history|jobs|kill|let|local|logout|' +
				'mapfile|readarray|popd|printf|pushd|pwd|read|shopt|suspend|test|' +
				'type|ulimit|umask|unalias|wait)\b'
			style = "keyword"
		}
	}

	sh-shell {
		%highlight { regex = '\\.' }
		%highlight { use = "sh-string" }
		%highlight { use = "sh-comment" }
		%highlight { use = "sh-variable" }
		%highlight { use = "sh-arithmetic" }
		%highlight { use = "sh-eval" }
		%highlight { use = "sh-simple-eval" }
		%highlight { use = "sh-keyword" }

		# Here we run into a limitation of libt3highlight: in principle any word (quoted
		# and all) may be supplied after the << operator. However, we have to have a
		# fixed end highlight, which can not refer to the start highlight. So we cant'
		# have a variable start condition, because we can't end it anymore. Thus,
		# instead we choose a particular (and obvious) start word, and use that.
		# Far from perfect, but it will do the job in most cases. To make it slightly
		# more useful, we use case-insensitive matching, which may in some cases
		# actually screw up.
		%highlight {
			start = '(?i)<<-?EOF'
			%highlight { use = "sh-variable" }
			%highlight { use = "sh-arithmetic" }
			%highlight { use = "sh-eval" }
			%highlight { use = "sh-simple-eval" }
			end = '^(?i)EOF'
			style = "string"
		}
	}
}
